{"version":3,"sources":["../../src/stringwidth/strwidth.js"],"names":["deburr","widthsMap","settingsDefaults","font","size","getWidth","string","settings","sett","toLowerCase","variant","bold","italic","available","Object","keys","indexOf","Error","join","totalWidth","split","forEach","char","test","widths","x","width"],"mappings":";;;;;;;;AAEOA,MAAAA,M;;AACAC,MAAAA,S;;;AAFP;AAIMC,MAAAA,gB,GAAmB;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE;AAAvB,O;;AAEnBC,MAAAA,Q,GAAW,SAAXA,QAAW,CAACC,MAAD,EAASC,QAAT,EAAsB;AACrC,YAAMC,IAAI,GAAGD,QAAb;AACA,YAAMJ,IAAI,GAAGK,IAAI,CAACL,IAAL,CAAUM,WAAV,EAAb;AACA,YAAML,IAAI,GAAGI,IAAI,CAACJ,IAAlB;AACA,YAAMM,OAAO,GAAG,KAAKF,IAAI,CAACG,IAAL,GAAY,CAAZ,GAAgB,CAArB,KAA2BH,IAAI,CAACI,MAAL,GAAc,CAAd,GAAkB,CAA7C,CAAhB;AACA,YAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYd,SAAZ,CAAlB;;AACA,YAAIY,SAAS,CAACG,OAAV,CAAkBb,IAAlB,MAA4B,CAAC,CAAjC,EAAoC;AAClC,gBAAM,IAAIc,KAAJ,4DAA8DJ,SAAS,CAACK,IAAV,CAAe,IAAf,CAA9D,EAAN;AACD;;AACD,YAAIC,UAAU,GAAG,CAAjB;AACAnB,QAAAA,MAAM,CAACM,MAAD,CAAN,CAAec,KAAf,CAAqB,EAArB,EAAyBC,OAAzB,CAAiC,UAACC,KAAD,EAAU;AACzC,cAAI,cAAcC,IAAd,CAAmBD,KAAnB,CAAJ,EAA8B;AAAE;AAC9B,mBAAO,IAAP;AACD,WAHwC,CAIzC;;;AACA,cAAME,MAAM,GAAGvB,SAAS,CAACE,IAAD,CAAT,CAAgBmB,KAAhB,KAAyBrB,SAAS,CAACE,IAAD,CAAT,CAAgBsB,CAAxD;AACA,cAAMC,KAAK,GAAGF,MAAM,CAACd,OAAD,CAApB;AACAS,UAAAA,UAAU,IAAIO,KAAd;AACA,iBAAO,IAAP;AACD,SATD;AAUA,eAAOP,UAAU,IAAIf,IAAI,GAAG,GAAX,CAAjB;AACD,O;;yBAEcC,Q","sourcesContent":["\r\n//import deburr from 'lodash.deburr';\r\nimport deburr from \"./deburr.js\";\r\nimport widthsMap from './widthsMap.js';\r\n\r\nconst settingsDefaults = { font: 'Arial', size: 100 };\r\n\r\nconst getWidth = (string, settings) => {\r\n  const sett = settings;\r\n  const font = sett.font.toLowerCase();\r\n  const size = sett.size;\r\n  const variant = 0 + (sett.bold ? 1 : 0) + (sett.italic ? 2 : 0);\r\n  const available = Object.keys(widthsMap);\r\n  if (available.indexOf(font) === -1) {\r\n    throw new Error(`This font is not supported. Supported fonts are: ${available.join(', ')}`);\r\n  }\r\n  let totalWidth = 0;\r\n  deburr(string).split('').forEach((char) => {\r\n    if (/[\\x00-\\x1F]/.test(char)) { // non-printable character\r\n      return true;\r\n    }\r\n    // use width of 'x' as fallback for unregistered char\r\n    const widths = widthsMap[font][char] || widthsMap[font].x;\r\n    const width = widths[variant];\r\n    totalWidth += width;\r\n    return true;\r\n  });\r\n  return totalWidth * (size / 100);\r\n};\r\n\r\nexport default getWidth;"],"file":"strwidth.js"}