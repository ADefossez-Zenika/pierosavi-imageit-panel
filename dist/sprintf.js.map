{"version":3,"sources":["../src/sprintf.js"],"names":["window","re","not_string","not_bool","not_type","not_primitive","number","numeric_arg","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf","arguments","cache","hasOwnProperty","parse","format","call","parse_tree","argv","cursor","tree_length","length","node_type","arg","output","i","k","match","pad","pad_character","pad_length","is_positive","get_type","Error","test","isNaN","TypeError","parseInt","toString","String","fromCharCode","JSON","stringify","parseFloat","toExponential","toFixed","toPrecision","substring","valueOf","toUpperCase","replace","charAt","str_repeat","join","fmt","_fmt","arg_names","exec","field_list","replacement_field","field_match","SyntaxError","vsprintf","_argv","slice","splice","apply","variable","Object","prototype","toLowerCase","preformattedPadding","input","multiplier","Array","exports","define","amd"],"mappings":"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","sourcesContent":["/* globals window, exports, define */\r\n\r\n(function(window) {\r\n    'use strict'\r\n\r\n    var re = {\r\n        not_string: /[^s]/,\r\n        not_bool: /[^t]/,\r\n        not_type: /[^T]/,\r\n        not_primitive: /[^v]/,\r\n        number: /[diefg]/,\r\n        numeric_arg: /bcdiefguxX/,\r\n        json: /[j]/,\r\n        not_json: /[^j]/,\r\n        text: /^[^\\x25]+/,\r\n        modulo: /^\\x25{2}/,\r\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\r\n        key: /^([a-z_][a-z_\\d]*)/i,\r\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\r\n        index_access: /^\\[(\\d+)\\]/,\r\n        sign: /^[\\+\\-]/\r\n    }\r\n\r\n    function sprintf() {\r\n        var key = arguments[0], cache = sprintf.cache\r\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\r\n            cache[key] = sprintf.parse(key)\r\n        }\r\n        return sprintf.format.call(null, cache[key], arguments)\r\n    }\r\n\r\n    sprintf.format = function(parse_tree, argv) {\r\n        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ''\r\n        for (i = 0; i < tree_length; i++) {\r\n            node_type = get_type(parse_tree[i])\r\n            if (node_type === 'string') {\r\n                output[output.length] = parse_tree[i]\r\n            }\r\n            else if (node_type === 'array') {\r\n                match = parse_tree[i] // convenience purposes only\r\n                if (match[2]) { // keyword argument\r\n                    arg = argv[cursor]\r\n                    for (k = 0; k < match[2].length; k++) {\r\n                        if (!arg.hasOwnProperty(match[2][k])) {\r\n                            throw new Error(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]))\r\n                        }\r\n                        arg = arg[match[2][k]]\r\n                    }\r\n                }\r\n                else if (match[1]) { // positional argument (explicit)\r\n                    arg = argv[match[1]]\r\n                }\r\n                else { // positional argument (implicit)\r\n                    arg = argv[cursor++]\r\n                }\r\n\r\n                if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && get_type(arg) == 'function') {\r\n                    arg = arg()\r\n                }\r\n\r\n                if (re.numeric_arg.test(match[8]) && (get_type(arg) != 'number' && isNaN(arg))) {\r\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\r\n                }\r\n\r\n                if (re.number.test(match[8])) {\r\n                    is_positive = arg >= 0\r\n                }\r\n\r\n                switch (match[8]) {\r\n                    case 'b':\r\n                        arg = parseInt(arg, 10).toString(2)\r\n                    break\r\n                    case 'c':\r\n                        arg = String.fromCharCode(parseInt(arg, 10))\r\n                    break\r\n                    case 'd':\r\n                    case 'i':\r\n                        arg = parseInt(arg, 10)\r\n                    break\r\n                    case 'j':\r\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\r\n                    break\r\n                    case 'e':\r\n                        arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential()\r\n                    break\r\n                    case 'f':\r\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\r\n                    break\r\n                    case 'g':\r\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\r\n                    break\r\n                    case 'o':\r\n                        arg = arg.toString(8)\r\n                    break\r\n                    case 's':\r\n                        arg = String(arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 't':\r\n                        arg = String(!!arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'T':\r\n                        arg = get_type(arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'u':\r\n                        arg = parseInt(arg, 10) >>> 0\r\n                    break\r\n                    case 'v':\r\n                        arg = arg.valueOf()\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'x':\r\n                        arg = parseInt(arg, 10).toString(16)\r\n                    break\r\n                    case 'X':\r\n                        arg = parseInt(arg, 10).toString(16).toUpperCase()\r\n                    break\r\n                }\r\n                if (re.json.test(match[8])) {\r\n                    output[output.length] = arg\r\n                }\r\n                else {\r\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\r\n                        sign = is_positive ? '+' : '-'\r\n                        arg = arg.toString().replace(re.sign, '')\r\n                    }\r\n                    else {\r\n                        sign = ''\r\n                    }\r\n                    pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' '\r\n                    pad_length = match[6] - (sign + arg).length\r\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : '') : ''\r\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\r\n                }\r\n            }\r\n        }\r\n        return output.join('')\r\n    }\r\n\r\n    sprintf.cache = {}\r\n\r\n    sprintf.parse = function(fmt) {\r\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\r\n        while (_fmt) {\r\n            if ((match = re.text.exec(_fmt)) !== null) {\r\n                parse_tree[parse_tree.length] = match[0]\r\n            }\r\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\r\n                parse_tree[parse_tree.length] = '%'\r\n            }\r\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\r\n                if (match[2]) {\r\n                    arg_names |= 1\r\n                    var field_list = [], replacement_field = match[2], field_match = []\r\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\r\n                        field_list[field_list.length] = field_match[1]\r\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\r\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\r\n                                field_list[field_list.length] = field_match[1]\r\n                            }\r\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\r\n                                field_list[field_list.length] = field_match[1]\r\n                            }\r\n                            else {\r\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\r\n                    }\r\n                    match[2] = field_list\r\n                }\r\n                else {\r\n                    arg_names |= 2\r\n                }\r\n                if (arg_names === 3) {\r\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\r\n                }\r\n                parse_tree[parse_tree.length] = match\r\n            }\r\n            else {\r\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\r\n            }\r\n            _fmt = _fmt.substring(match[0].length)\r\n        }\r\n        return parse_tree\r\n    }\r\n\r\n    var vsprintf = function(fmt, argv, _argv) {\r\n        _argv = (argv || []).slice(0)\r\n        _argv.splice(0, 0, fmt)\r\n        return sprintf.apply(null, _argv)\r\n    }\r\n\r\n    /**\r\n     * helpers\r\n     */\r\n    function get_type(variable) {\r\n        if (typeof variable === 'number') {\r\n            return 'number'\r\n        }\r\n        else if (typeof variable === 'string') {\r\n            return 'string'\r\n        }\r\n        else {\r\n            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\r\n        }\r\n    }\r\n\r\n    var preformattedPadding = {\r\n        '0': ['', '0', '00', '000', '0000', '00000', '000000', '0000000'],\r\n        ' ': ['', ' ', '  ', '   ', '    ', '     ', '      ', '       '],\r\n        '_': ['', '_', '__', '___', '____', '_____', '______', '_______'],\r\n    }\r\n    function str_repeat(input, multiplier) {\r\n        if (multiplier >= 0 && multiplier <= 7 && preformattedPadding[input]) {\r\n            return preformattedPadding[input][multiplier]\r\n        }\r\n        return Array(multiplier + 1).join(input)\r\n    }\r\n\r\n    /**\r\n     * export to either browser or node.js\r\n     */\r\n    if (typeof exports !== 'undefined') {\r\n        exports.sprintf = sprintf\r\n        exports.vsprintf = vsprintf\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        window.sprintf = sprintf\r\n        window.vsprintf = vsprintf\r\n\r\n        if (typeof define === 'function' && define.amd) {\r\n            define(function() {\r\n                return {\r\n                    sprintf: sprintf,\r\n                    vsprintf: vsprintf\r\n                }\r\n            })\r\n        }\r\n    }\r\n})(typeof window === 'undefined' ? this : window);\r\n"],"file":"sprintf.js"}