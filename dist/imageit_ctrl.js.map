{"version":3,"sources":["../src/imageit_ctrl.js"],"names":["isEqualTo","a","b","undefined","isGreaterThan","isLessThan","getMappingOperators","mappingOperators","getRandomId","Math","random","toString","substr","ValueColorMapping","id","name","operatorName","compareTo","isSensorFontBold","fontColor","bgColor","fontBlink","bgBlink","Sensor","metric","xlocation","ylocation","format","size","visible","renderValue","valueFormatted","valueUnit","displayName","link_url","resolvedLink","rectangular","group","valueMappingIds","isBold","Group","alignment","x","y","sameSize","width","normalizeColor","color","toLowerCase","_","MetricsPanelCtrl","getWidth","interact","panelDefaults","colorMappings","colorMappingMap","valueMappings","metricValues","seriesList","series","bgimage","sensors","groups","useLabelGroupings","height","templateSrv","sizecoefficient","uncache","operator","fn","isTheFirstRender","ImageItCtrl","$scope","$injector","$sce","defaults","panel","events","on","onInitEditMode","bind","render","onDataReceived","dataList","dataListLength","length","push","target","value","datapoints","refreshImage","index","splice","sensor","result","ctrl","map","g","alert","JSON","stringify","addEditorTab","scope","elem","attrs","panelContainer","find","image","querySelector","getGroup","metricMap","keyBy","valueMappingsMap","mapping","mappingOperatorsMap","hasOwnProperty","imageWidth","offsetWidth","sensorWidth","font","newValue","max","panelWidth","ylocationStr","xlocationStr","alignSensors","sizeStr","borderRadius","replace","effectiveName","mValue","valueMapping","mappingOperatorName","mappingId","mappingOperator","realFontColor","realBbColor","realBgColor","sprintf","dragEventSetup","window","draggable","inertia","restrict","restriction","endOnly","elementRect","top","left","bottom","right","autoScroll","onmove","event","parseFloat","getAttribute","dx","dy","style","webkitTransform","transform","setAttribute","onend","imageHeight","offsetHeight","xpercentage","ypercentage","newX","parseInt","round","newY","nextTop","nextX","sensorHeight","renderingCompleted","ColorMapping","refreshColorMappings","split","startsWith","endsWith","icon","indexOf","repeatCount","repeat","slice","imgUrl","imgWidth","imgHeight","join","trustAsHtml","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA4bA,WAASA,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACrB,WAAQD,CAAC,KAAKE,SAAN,IAAmBD,CAAC,KAAKC,SAA1B,GAAuCF,CAAC,IAAIC,CAA5C,GAAgD,KAAvD;AACH;;AAED,WAASE,aAAT,CAAuBH,CAAvB,EAA0BC,CAA1B,EAA6B;AACzB,WAAQD,CAAC,KAAKE,SAAN,IAAmBD,CAAC,KAAKC,SAA1B,GAAuCF,CAAC,GAAGC,CAA3C,GAA+C,KAAtD;AACH;;AAED,WAASG,UAAT,CAAoBJ,CAApB,EAAuBC,CAAvB,EAA0B;AACtB,WAAQD,CAAC,KAAKE,SAAN,IAAmBD,CAAC,KAAKC,SAA1B,GAAuCF,CAAC,GAAGC,CAA3C,GAA+C,KAAtD;AACH;;AAED,WAASI,oBAAT,GAA+B;AAC3B,WAAOC,gBAAP;AACH;;AAED,WAASC,WAAT,GAAuB;AACnB,WAAO,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAb;AACH;;AAED,WAASC,iBAAT,GAA6B;AACzB,iBADyB,CAEzB;;AACA,SAAKC,EAAL,GAAUN,WAAW,EAArB;AACA,SAAKO,IAAL,GAAYZ,SAAZ;AACA,SAAKa,YAAL,GAAoBT,gBAAgB,CAAC,CAAD,CAAhB,CAAoBQ,IAAxC;AACA,SAAKE,SAAL,GAAiBd,SAAjB;AACA,SAAKe,gBAAL,GAAwB,KAAxB;AACA,SAAKC,SAAL,GAAiBhB,SAAjB;AACA,SAAKiB,OAAL,GAAejB,SAAf;AACA,SAAKkB,SAAL,GAAiB,KAAjB;AACA,SAAKC,OAAL,GAAe,KAAf;AACH;;AAED,WAASC,MAAT,CAAgBC,MAAhB,EACgBC,SADhB,EAEgBC,SAFhB,EAGgBC,MAHhB,EAIgBP,OAJhB,EAKgBD,SALhB,EAMgBS,IANhB,EAOgBC,OAPhB,EAOyB;AACrB;;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKP,OAAL,GAAeA,OAAf;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKS,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKzB,EAAL,GAAUN,WAAW,EAArB;AACH;;AAED,WAASgC,KAAT,CAAezB,IAAf,EAAqB0B,SAArB,EAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AAClC;;AACA,SAAK5B,IAAL,GAAYA,IAAZ;AACA,SAAK0B,SAAL,GAAiBA,SAAjB;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,KAAL,GAAa,GAAb;AACH;;AAED,WAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAE3B,QAAIA,KAAK,CAACC,WAAN,OAAwB,OAA5B,EAAqC;AACjC,aAAO,yBAAP;AACH,KAFD,MAEO,IAAID,KAAK,CAACC,WAAN,OAAwB,QAA5B,EAAsC;AACzC,aAAO,0BAAP;AACH,KAFM,MAEA,IAAID,KAAK,CAACC,WAAN,OAAwB,KAA5B,EAAmC;AACtC,aAAO,wBAAP;AACH,KAFM,MAEA;AAAE,aAAOD,KAAK,CAACC,WAAN,EAAP;AAA6B;AACzC;;;;AA/gBMC,MAAAA,C;;AACCC,MAAAA,gB,kBAAAA,gB;;AAGDC,MAAAA,Q;;AACAC,MAAAA,Q;;;AAEDC,MAAAA,a,GAAgB;AAClBC,QAAAA,aAAa,EAAE,EADG;AAElBC,QAAAA,eAAe,EAAE,EAFC;AAGlBC,QAAAA,aAAa,EAAE,EAHG;AAIlBC,QAAAA,YAAY,EAAE,EAJI;AAKlBC,QAAAA,UAAU,EAAE,EALM;AAMlBC,QAAAA,MAAM,EAAE,EANU;AAOlBC,QAAAA,OAAO,EAAE,EAPS;AAQlBC,QAAAA,OAAO,EAAE,EARS;AASlBC,QAAAA,MAAM,EAAE,EATU;AAUlBC,QAAAA,iBAAiB,EAAE,KAVD;AAWlBC,QAAAA,MAAM,EAAE,OAXU;AAYlBnB,QAAAA,KAAK,EAAE,OAZW;AAalBoB,QAAAA,WAAW,EAAE,IAbK;AAclBC,QAAAA,eAAe,EAAE,EAdC;AAelB;AACAC,QAAAA,OAAO,EAAE;AAhBS,O;AAmBhB5D,MAAAA,gB,GAAmB,CAAC;AACtBQ,QAAAA,IAAI,EAAE,OADgB;AACPqD,QAAAA,QAAQ,EAAE,GADH;AACQC,QAAAA,EAAE,EAAErE;AADZ,OAAD,EAEvB;AACEe,QAAAA,IAAI,EAAE,aADR;AACuBqD,QAAAA,QAAQ,EAAE,GADjC;AACsCC,QAAAA,EAAE,EAAEjE;AAD1C,OAFuB,EAItB;AACCW,QAAAA,IAAI,EAAE,UADP;AACmBqD,QAAAA,QAAQ,EAAE,GAD7B;AACkCC,QAAAA,EAAE,EAAEhE;AADtC,OAJsB,C;AAQrBiE,MAAAA,gB,GAAmB,I;;6BAEVC,W;;;;;AAET,6BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCT,WAArC,EAAkD;AAAA;;AAAA;;AAC9C,2FAAMO,MAAN,EAAcC,SAAd;;AACAxB,UAAAA,CAAC,CAAC0B,QAAF,CAAW,MAAKC,KAAhB,EAAuBvB,aAAvB;;AACA,gBAAKY,WAAL,GAAmBA,WAAnB;AACA,gBAAKS,IAAL,GAAYA,IAAZ;;AACA,gBAAKG,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,+BAAjC;;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKG,MAAL,CAAYD,IAAZ,+BAApC;;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKI,cAAL,CAAoBF,IAApB,+BAAhC;;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKI,cAAL,CAAoBF,IAApB,+BAArC;;AAR8C;AASjD;;;;yCAEcG,Q,EAAU;AACrB,gBAAMC,cAAc,GAAGD,QAAQ,CAACE,MAAhC;AACA,iBAAKT,KAAL,CAAWnB,YAAX,GAA0B,EAA1B;;AACA,iBAAK,IAAIE,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGyB,cAA9B,EAA8CzB,MAAM,EAApD,EAAwD;AACpD,mBAAKiB,KAAL,CAAWnB,YAAX,CAAwB6B,IAAxB,CAA6B;AACzBvE,gBAAAA,IAAI,EAAEoE,QAAQ,CAACxB,MAAD,CAAR,CAAiB4B,MADE;AAEzBC,gBAAAA,KAAK,EAAEL,QAAQ,CAACxB,MAAD,CAAR,CAAiB8B,UAAjB,CAA4BN,QAAQ,CAACxB,MAAD,CAAR,CAAiB8B,UAAjB,CAA4BJ,MAA5B,GAAqC,CAAjE,EAAoE,CAApE;AAFkB,eAA7B;AAIH;;AAED,gBAAG,CAACf,gBAAJ,EAAsB;AAClB,mBAAKoB,YAAL;AACH,aAFD,MAEO;AACHpB,cAAAA,gBAAgB,GAAG,KAAnB;AACH;;AAGD,iBAAKW,MAAL;AACH;;;yCAEa;AACV,iBAAKL,KAAL,CAAWT,OAAX,GAAqB1D,IAAI,CAACC,MAAL,EAArB;AACH;;;uCAEYiF,K,EAAO;AAChB,iBAAKf,KAAL,CAAWf,OAAX,CAAmB+B,MAAnB,CAA0BD,KAA1B,EAAiC,CAAjC;AACH;;;sCAEW;AACR,iBAAKf,KAAL,CAAWf,OAAX,CAAmByB,IAAnB,CACI,IAAI/D,MAAJ,CAAW,GAAX,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,MAAxB,EAAgC,sBAAhC,EAAwD,yBAAxD,EAAmF,EAAnF,EAAuF,IAAvF,CADJ;AAGH;;;uCAEYoE,K,EAAO;AAChB,gBAAME,MAAM,GAAG,KAAKjB,KAAL,CAAWf,OAAX,CAAmB8B,KAAnB,CAAf;AACA,iBAAKf,KAAL,CAAWf,OAAX,CAAmB+B,MAAnB,CAA0BD,KAA1B,EAAiC,CAAjC;AACA,iBAAKf,KAAL,CAAWf,OAAX,CAAmB+B,MAAnB,CAA0BD,KAAK,GAAC,CAAhC,EAAkC,CAAlC,EAAoCE,MAApC;AACH;;;yCAEcF,K,EAAO;AAClB,gBAAME,MAAM,GAAG,KAAKjB,KAAL,CAAWf,OAAX,CAAmB8B,KAAnB,CAAf;AACA,iBAAKf,KAAL,CAAWf,OAAX,CAAmB+B,MAAnB,CAA0BD,KAA1B,EAAiC,CAAjC;AACA,iBAAKf,KAAL,CAAWf,OAAX,CAAmB+B,MAAnB,CAA0BD,KAAK,GAAC,CAAhC,EAAkC,CAAlC,EAAoCE,MAApC;AACH;;;sCAEWF,K,EAAO;AACf,iBAAKf,KAAL,CAAWd,MAAX,CAAkB8B,MAAlB,CAAyBD,KAAzB,EAAgC,CAAhC;AACH;;;qCAEU;AACP,iBAAKf,KAAL,CAAWd,MAAX,CAAkBwB,IAAlB,CACI,IAAI9C,KAAJ,CAAU,GAAV,EAAe,MAAf,EAAuB,EAAvB,EAA2B,EAA3B,CADJ;AAGH;;;+CAEoB;AAEjB,gBAAMsD,MAAM,GAAGC,IAAI,CAACnB,KAAL,CAAWd,MAAX,CAAkBkC,GAAlB,CAAsB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAAClF,IAAN;AAAA,aAAvB,CAAf;AACAmF,YAAAA,KAAK,CAAC,aAAaC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAd,CAAL;AACA,mBAAOA,MAAP;AACH;;;2CAEgB;AACb,iBAAKO,YAAL,CAAkB,QAAlB,EAA4B,oDAA5B,EAAkF,CAAlF;AACA,iBAAKA,YAAL,CAAkB,eAAlB,EAAmC,sDAAnC,EAA2F,CAA3F;AACH;;;+BAEIC,K,EAAOC,I,EAAMC,K,EAAOT,I,EAAM;AAC3B,gBAAMU,cAAc,GAAIF,IAAI,CAACG,IAAL,CAAU,0BAAV,EAAsC,CAAtC,CAAxB;AACA,gBAAMC,KAAK,GAAIF,cAAc,CAACG,aAAf,CAA6B,gBAA7B,CAAf;;AAEA,qBAASC,QAAT,CAAkB9F,IAAlB,EAAwB;AAAA;AAAA;AAAA;;AAAA;AACpB,qCAAkBgF,IAAI,CAACnB,KAAL,CAAWd,MAA7B,8HAAqC;AAAA,sBAA5BzB,MAA4B;;AACjC,sBAAGA,MAAK,CAACtB,IAAN,IAAcA,IAAjB,EAAsB;AAClB,2BAAOsB,MAAP;AACH;AACJ;AALmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMpB,qBAAO,IAAP;AACH;;AAED,qBAAS4C,MAAT,GAAkB;AAEd,kBAAI,CAACc,IAAI,CAACnB,KAAL,CAAWf,OAAhB,EAAyB;AACrB;AACH;;AAED,kBAAIiD,SAAS,GAAG7D,CAAC,CAAC8D,KAAF,CAAQhB,IAAI,CAACnB,KAAL,CAAWnB,YAAnB,EAAiC,UAAA+B,KAAK;AAAA,uBAAIA,KAAK,CAACzE,IAAV;AAAA,eAAtC,CAAhB;;AACA,kBAAIiG,gBAAgB,GAAG/D,CAAC,CAAC8D,KAAF,CAAQhB,IAAI,CAACnB,KAAL,CAAWpB,aAAnB,EAAkC,UAAAyD,OAAO;AAAA,uBAAIA,OAAO,CAACnG,EAAZ;AAAA,eAAzC,CAAvB;;AACA,kBAAIoG,mBAAmB,GAAGjE,CAAC,CAAC8D,KAAF,CAAQxG,gBAAR,EAA0B,UAAA6D,QAAQ;AAAA,uBAAIA,QAAQ,CAACrD,IAAb;AAAA,eAAlC,CAA1B;;AARc;AAAA;AAAA;;AAAA;AAUd,sCAAmBgF,IAAI,CAACnB,KAAL,CAAWf,OAA9B,mIAAuC;AAAA,sBAA9BgC,MAA8B;;AAEnC,sBAAG,CAACA,MAAM,CAACsB,cAAP,CAAsB,IAAtB,CAAJ,EAAgC;AAC5BtB,oBAAAA,MAAM,CAAC/E,EAAP,GAAYN,WAAW,EAAvB;AACH;;AAED,sBAAImG,KAAK,IAAI,IAAb,EAAmB;AACf,wBAAIS,UAAU,GAAGT,KAAK,CAACU,WAAvB;AACAxB,oBAAAA,MAAM,CAACjE,IAAP,GAAcwF,UAAU,GAAGrB,IAAI,CAACnB,KAAL,CAAWV,eAAxB,GAA0C,IAAxD;AACH;;AAED,sBAAMoD,WAAW,GAAGnE,QAAQ,CAAC0C,MAAM,CAAC5D,WAAR,EAAqB;AAAEsF,oBAAAA,IAAI,EAAE,OAAR;AAAiB3F,oBAAAA,IAAI,EAAEiE,MAAM,CAACjE;AAA9B,mBAArB,CAAR,GAAqE,EAAzF;;AACA,sBAAGmE,IAAI,CAACnB,KAAL,CAAWb,iBAAd,EAAgC;AAC5B,wBAAM1B,OAAK,GAAGwE,QAAQ,CAAChB,MAAM,CAACxD,KAAP,CAAatB,IAAd,CAAtB;;AACA,wBAAGsB,OAAK,IAAI,IAAT,IAAiBA,OAAK,CAACO,QAA1B,EAAmC;AAC/B,0BAAM4E,QAAQ,GAAG/G,IAAI,CAACgH,GAAL,CAASpF,OAAK,CAACQ,KAAf,EAAsByE,WAAtB,CAAjB;AACAjF,sBAAAA,OAAK,CAACQ,KAAN,GAAc2E,QAAd;AACA3B,sBAAAA,MAAM,CAAChD,KAAP,GAAe2E,QAAf;AACH,qBAJD,MAIK;AACD3B,sBAAAA,MAAM,CAAC6B,UAAP,GAAoBJ,WAAW,GAAG,IAAlC;AACAzB,sBAAAA,MAAM,CAAChD,KAAP,GAAeyE,WAAf;AACH;AACJ,mBAVD,MAUK;AACDzB,oBAAAA,MAAM,CAAC6B,UAAP,GAAoBJ,WAAW,GAAG,IAAlC;AACAzB,oBAAAA,MAAM,CAAChD,KAAP,GAAeyE,WAAf;AACH;AACJ;AApCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAsCd,sCAAmBvB,IAAI,CAACnB,KAAL,CAAWf,OAA9B,mIAAuC;AAAA,sBAA9BgC,OAA8B;;AACnC,sBAAGE,IAAI,CAACnB,KAAL,CAAWb,iBAAX,IAAgC1B,KAAK,CAACO,QAAzC,EAAkD;AAC9C,wBAAMP,OAAK,GAAGwE,QAAQ,CAAChB,OAAM,CAACxD,KAAP,CAAatB,IAAd,CAAtB;;AACA,wBAAGsB,OAAK,IAAI,IAAZ,EAAiB;AACbwD,sBAAAA,OAAM,CAAC6B,UAAP,GAAoBrF,OAAK,CAACQ,KAAN,GAAc,IAAlC;AACAgD,sBAAAA,OAAM,CAAChD,KAAP,GAAeR,OAAK,CAACQ,KAArB;AACH;AACJ;;AAED,sBAAG,CAACkD,IAAI,CAACnB,KAAL,CAAWb,iBAAf,EAAiC;AAC7B8B,oBAAAA,OAAM,CAAC8B,YAAP,GAAsB9B,OAAM,CAACnE,SAAP,CAAiBf,QAAjB,KAA8B,IAApD;AACAkF,oBAAAA,OAAM,CAAC+B,YAAP,GAAsB/B,OAAM,CAACpE,SAAP,CAAiBd,QAAjB,KAA8B,IAApD;AACH,mBAHD,MAGK;AACDkH,oBAAAA,YAAY;AACf;;AACDhC,kBAAAA,OAAM,CAACiC,OAAP,GAAiBjC,OAAM,CAACjE,IAAP,CAAYjB,QAAZ,KAAyB,IAA1C;;AAEA,sBAAGkF,OAAM,CAACzD,WAAV,EAAsB;AAClByD,oBAAAA,OAAM,CAACkC,YAAP,GAAsB,IAAtB;AACH,mBAFD,MAEK;AACDlC,oBAAAA,OAAM,CAACkC,YAAP,GAAsB,KAAtB;AACH;;AAED,sBAAGlC,OAAM,CAAC3D,QAAP,IAAmB/B,SAAtB,EAAiC;AAC7B0F,oBAAAA,OAAM,CAAC1D,YAAP,GAAsB4D,IAAI,CAAC9B,WAAL,CAAiB+D,OAAjB,CAAyBnC,OAAM,CAAC3D,QAAhC,CAAtB;AACH,mBAzBkC,CA2BnC;;;AACA,sBAAM+F,aAAa,GAAGlC,IAAI,CAAC9B,WAAL,CAAiB+D,OAAjB,CAAyBnC,OAAM,CAACrE,MAAhC,CAAtB;AAEA,sBAAI0G,MAAM,GAAGpB,SAAS,CAACmB,aAAD,CAAtB;;AACA,sBAAIC,MAAM,KAAK/H,SAAf,EAA0B;AACtB+H,oBAAAA,MAAM,GAAG;AAACnH,sBAAAA,IAAI,EAAE,OAAP;AAAgByE,sBAAAA,KAAK,EAAE;AAAvB,qBAAT;AACH,mBAjCkC,CAmCnC;;;AAnCmC;AAAA;AAAA;;AAAA;AAoCnC,0CAAyBO,IAAI,CAACnB,KAAL,CAAWpB,aAApC,mIAAmD;AAAA,0BAA1C2E,YAA0C;;AAC/C,0BAAIA,YAAY,CAACC,mBAAb,IAAoC,IAAxC,EAA8C;AAC1CD,wBAAAA,YAAY,CAACC,mBAAb,GAAmC7H,gBAAgB,CAAC,CAAD,CAAhB,CAAoBQ,IAAvD;AACH;;AAED,0BAAGoH,YAAY,CAACrH,EAAb,IAAmB,IAAtB,EAA4B;AACxBqH,wBAAAA,YAAY,CAACrH,EAAb,GAAkBN,WAAW,EAA7B;AACH;AAEJ;AA7CkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+CnCqF,kBAAAA,OAAM,CAACvD,eAAP,IAA0BnC,SAA1B,GAAsC0F,OAAM,CAACvD,eAAP,GAAyB,EAA/D,GAAoE,EAApE;AA/CmC;AAAA;AAAA;;AAAA;AAiDnC,0CAAwBuD,OAAM,CAACvD,eAA/B,mIAAgD;AAAA,0BAArC+F,SAAqC;AAC5C,0BAAMF,aAAY,GAAGnB,gBAAgB,CAACqB,SAAD,CAArC;AAEA,0BAAMC,eAAe,GAAGpB,mBAAmB,CAACiB,aAAY,CAACC,mBAAd,CAA3C;;AAEA,0BAAGE,eAAe,CAACjE,EAAhB,CAAmB6D,MAAM,CAAC1C,KAA1B,EAAiC2C,aAAY,CAAClH,SAA9C,CAAH,EAA6D;AAEzD4E,wBAAAA,OAAM,CAAC0C,aAAP,GAAuBJ,aAAY,CAAChH,SAApC;AACA0E,wBAAAA,OAAM,CAAC2C,WAAP,GAAqBL,aAAY,CAAC/G,OAAlC;AAEA+G,wBAAAA,aAAY,CAAC9G,SAAb,GAAyBwE,OAAM,CAACxE,SAAhC,GAA4C,IAA5C;AACA8G,wBAAAA,aAAY,CAAC7G,OAAb,GAAuBuE,OAAM,CAACvE,OAA9B,GAAwC,IAAxC;AAEAuE,wBAAAA,OAAM,CAACtD,MAAP,GAAgB4F,aAAY,CAACjH,gBAA7B;AAEA;AACH,uBAXD,MAWO;AACH;AACA;AACA2E,wBAAAA,OAAM,CAAC4C,WAAP,GAAqB5C,OAAM,CAACzE,OAA5B;AACAyE,wBAAAA,OAAM,CAAC0C,aAAP,GAAuB1C,OAAM,CAAC1E,SAA9B;AAEA0E,wBAAAA,OAAM,CAACxE,SAAP,GAAmB,KAAnB;AACAwE,wBAAAA,OAAM,CAACvE,OAAP,GAAiB,KAAjB;AAEAuE,wBAAAA,OAAM,CAACtD,MAAP,GAAgB,KAAhB;AACH;AAEJ,qBA7EkC,CAgFnC;;AAhFmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiFnCsD,kBAAAA,OAAM,CAAC9D,cAAP,GAAwB2G,OAAO,CAAC7C,OAAM,CAAClE,MAAR,EAAeuG,MAAM,CAAC1C,KAAtB,CAA/B;AACH;AAxHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0HdmD,cAAAA,cAAc;AAEjB;;AAED,qBAASA,cAAT,GAA0B;AACtBC,cAAAA,MAAM,CAACxF,QAAP,CAAgB,mBAAmB2C,IAAI,CAACnB,KAAL,CAAW9D,EAA9B,GAAmC,SAAnD,EAA8D+H,SAA9D,CAAwE;AACpE;AACAC,gBAAAA,OAAO,EAAE,KAF2D;AAGpEC,gBAAAA,QAAQ,EAAE;AACNC,kBAAAA,WAAW,EAAE,kBADP;AAENC,kBAAAA,OAAO,EAAE,IAFH;AAGNC,kBAAAA,WAAW,EAAE;AAAEC,oBAAAA,GAAG,EAAE,CAAP;AAAUC,oBAAAA,IAAI,EAAE,CAAhB;AAAmBC,oBAAAA,MAAM,EAAE,CAA3B;AAA8BC,oBAAAA,KAAK,EAAE;AAArC;AAHP,iBAH0D;AAQpEC,gBAAAA,UAAU,EAAE,IARwD;AASpEC,gBAAAA,MAAM,EAAE,gBAAUC,KAAV,EAAiB;AACrB,sBAAMlE,MAAM,GAAGkE,KAAK,CAAClE,MAArB;AAAA,sBACA;AACA7C,kBAAAA,CAAC,GAAG,CAACgH,UAAU,CAACnE,MAAM,CAACoE,YAAP,CAAoB,QAApB,CAAD,CAAV,IAA6C,CAA9C,IAAmDF,KAAK,CAACG,EAF7D;AAAA,sBAGAjH,CAAC,GAAG,CAAC+G,UAAU,CAACnE,MAAM,CAACoE,YAAP,CAAoB,QAApB,CAAD,CAAV,IAA6C,CAA9C,IAAmDF,KAAK,CAACI,EAH7D,CADqB,CAMrB;;AACAtE,kBAAAA,MAAM,CAACuE,KAAP,CAAaC,eAAb,GACAxE,MAAM,CAACuE,KAAP,CAAaE,SAAb,GACA,eAAetH,CAAf,GAAmB,MAAnB,GAA4BC,CAA5B,GAAgC,KAFhC,CAPqB,CAWrB;;AACA4C,kBAAAA,MAAM,CAAC0E,YAAP,CAAoB,QAApB,EAA8BvH,CAA9B;AACA6C,kBAAAA,MAAM,CAAC0E,YAAP,CAAoB,QAApB,EAA8BtH,CAA9B;AAEH,iBAxBmE;AAyBpEuH,gBAAAA,KAAK,EAAE,eAAUT,KAAV,EAAiB;AACpB,sBAAMlE,MAAM,GAAGkE,KAAK,CAAClE,MAArB;AAEA,sBAAI4E,WAAW,GAAGxD,KAAK,CAACyD,YAAxB;AACA,sBAAIhD,UAAU,GAAGT,KAAK,CAACU,WAAvB;AAEA,sBAAI3E,CAAC,GAAG6C,MAAM,CAACoE,YAAP,CAAoB,QAApB,CAAR;AACA,sBAAIhH,CAAC,GAAG4C,MAAM,CAACoE,YAAP,CAAoB,QAApB,CAAR,CAPoB,CASpB;;AACA,sBAAIU,WAAW,GAAI3H,CAAC,GAAG,GAAL,GAAY0E,UAA9B;AACA,sBAAIkD,WAAW,GAAI3H,CAAC,GAAG,GAAL,GAAYwH,WAA9B,CAXoB,CAapB;;AACA,sBAAII,IAAI,GAAGC,QAAQ,CAACjF,MAAM,CAACuE,KAAP,CAAaV,IAAd,CAAR,GAA8BiB,WAAzC;AACAE,kBAAAA,IAAI,GAAG9J,IAAI,CAACgK,KAAL,CAAWF,IAAI,GAAG,KAAlB,IAA2B,KAAlC;AAEA,sBAAIG,IAAI,GAAGF,QAAQ,CAACjF,MAAM,CAACuE,KAAP,CAAaX,GAAd,CAAR,GAA6BmB,WAAxC;AACAI,kBAAAA,IAAI,GAAGjK,IAAI,CAACgK,KAAL,CAAWC,IAAI,GAAG,KAAlB,IAA2B,KAAlC;AAEAnF,kBAAAA,MAAM,CAACuE,KAAP,CAAaC,eAAb,GACAxE,MAAM,CAACuE,KAAP,CAAaE,SAAb,GACA,qBAFA,CApBoB,CAwBpB;;AACAzE,kBAAAA,MAAM,CAACuE,KAAP,CAAaV,IAAb,GAAoBmB,IAAI,GAAG,GAA3B;AACAhF,kBAAAA,MAAM,CAACuE,KAAP,CAAaX,GAAb,GAAmBuB,IAAI,GAAG,GAA1B,CA1BoB,CA4BpB;AAEA;;AACA,sBAAI7E,MAAM,GAAG5C,CAAC,CAACyD,IAAF,CAAOX,IAAI,CAACnB,KAAL,CAAWf,OAAlB,EAA2B;AAAC,0BAAO4F,KAAK,CAAClE,MAAP,CAAeoE,YAAf,CAA4B,OAA5B;AAAP,mBAA3B,CAAb;;AAEA9D,kBAAAA,MAAM,CAACpE,SAAP,GAAmB8I,IAAnB;AACA1E,kBAAAA,MAAM,CAACnE,SAAP,GAAmBgJ,IAAnB,CAlCoB,CAoCpB;;AACAnF,kBAAAA,MAAM,CAAC0E,YAAP,CAAoB,QAApB,EAA8B,CAA9B;AACA1E,kBAAAA,MAAM,CAAC0E,YAAP,CAAoB,QAApB,EAA8B,CAA9B;AACH;AAhEmE,eAAxE;AAkEH;;AAED,qBAASpC,YAAT,GAAuB;AAAA;AAAA;AAAA;;AAAA;AACnB,sCAAkB9B,IAAI,CAACnB,KAAL,CAAWd,MAA7B,mIAAqC;AAAA,sBAA5BzB,OAA4B;AACjCA,kBAAAA,OAAK,CAACsI,OAAN,GAAgBxK,SAAhB;AACAkC,kBAAAA,OAAK,CAACuI,KAAN,GAAczK,SAAd;AACH;AAJkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAKnB,sCAAmB4F,IAAI,CAACnB,KAAL,CAAWf,OAA9B,mIAAuC;AAAA,sBAA9BgC,MAA8B;AACnC,sBAAMgF,YAAY,GAAGhF,MAAM,CAACjE,IAAP,GAAc,EAAnC;AACA,sBAAM0F,WAAW,GAAGzB,MAAM,CAAChD,KAAP,GAAe,EAAnC;;AACA,sBAAIR,OAAK,GAAGwE,QAAQ,CAAChB,MAAM,CAACxD,KAAP,CAAatB,IAAd,CAApB;;AACA,sBAAGsB,OAAK,CAACI,SAAN,IAAmB,MAAtB,EAA6B;AACzB,wBAAGJ,OAAK,CAACsI,OAAN,KAAkBxK,SAArB,EAA+B;AAC3BkC,sBAAAA,OAAK,CAACsI,OAAN,GAAgBtI,OAAK,CAACM,CAAtB;AACH;;AACDkD,oBAAAA,MAAM,CAAC8B,YAAP,GAAsBtF,OAAK,CAACsI,OAAN,GAAgB,IAAtC;AACA9E,oBAAAA,MAAM,CAAC+B,YAAP,GAAsBvF,OAAK,CAACK,CAAN,GAAU,IAAhC;AACAL,oBAAAA,OAAK,CAACsI,OAAN,GAAgBtI,OAAK,CAACsI,OAAN,GAAgBE,YAAhC;AACH,mBAPD,MAOO,IAAGxI,OAAK,CAACI,SAAN,IAAmB,QAAtB,EAA+B;AAClC,wBAAGJ,OAAK,CAACsI,OAAN,KAAkBxK,SAArB,EAA+B;AAC3BkC,sBAAAA,OAAK,CAACsI,OAAN,GAAgBtI,OAAK,CAACM,CAAtB;AACH;;AACDkD,oBAAAA,MAAM,CAAC8B,YAAP,GAAsBtF,OAAK,CAACsI,OAAN,GAAgB,IAAtC;;AACA,wBAAGtI,OAAK,CAACO,QAAT,EAAkB;AACdiD,sBAAAA,MAAM,CAAC+B,YAAP,GAAuBvF,OAAK,CAACK,CAAN,GAAWL,OAAK,CAACQ,KAAN,GAAY,CAAxB,GAA8B,IAApD;AACH,qBAFD,MAEK;AACDgD,sBAAAA,MAAM,CAAC+B,YAAP,GAAuBvF,OAAK,CAACK,CAAN,GAAWmD,MAAM,CAAChD,KAAP,GAAa,CAAzB,GAA8B,IAApD;AACH;;AACDR,oBAAAA,OAAK,CAACsI,OAAN,GAAgBtI,OAAK,CAACsI,OAAN,GAAgBE,YAAhC;AACH,mBAXM,MAWA,IAAGxI,OAAK,CAACI,SAAN,IAAmB,OAAtB,EAA8B;AACjC,wBAAGJ,OAAK,CAACsI,OAAN,KAAkBxK,SAArB,EAA+B;AAC3BkC,sBAAAA,OAAK,CAACsI,OAAN,GAAgBtI,OAAK,CAACM,CAAtB;AACH;;AACDkD,oBAAAA,MAAM,CAAC8B,YAAP,GAAsBtF,OAAK,CAACsI,OAAN,GAAgB,IAAtC;;AACA,wBAAGtI,OAAK,CAACO,QAAT,EAAkB;AACdiD,sBAAAA,MAAM,CAAC+B,YAAP,GAAuBvF,OAAK,CAACK,CAAN,GAAUL,OAAK,CAACQ,KAAjB,GAA0B,IAAhD;AACH,qBAFD,MAEK;AACDgD,sBAAAA,MAAM,CAAC+B,YAAP,GAAuBvF,OAAK,CAACK,CAAN,GAAUmD,MAAM,CAAChD,KAAlB,GAA0B,IAAhD;AACH;;AACDR,oBAAAA,OAAK,CAACsI,OAAN,GAAgBtI,OAAK,CAACsI,OAAN,GAAgBE,YAAhC;AACH,mBAXM,MAWA,IAAGxI,OAAK,CAACI,SAAN,IAAmB,KAAtB,EAA4B;AAC/B,wBAAGJ,OAAK,CAACuI,KAAN,KAAgBzK,SAAnB,EAA6B;AACzBkC,sBAAAA,OAAK,CAACuI,KAAN,GAAcvI,OAAK,CAACK,CAApB;AACH;;AACDmD,oBAAAA,MAAM,CAAC+B,YAAP,GAAsBvF,OAAK,CAACuI,KAAN,GAAc,IAApC;AACA/E,oBAAAA,MAAM,CAAC8B,YAAP,GAAsBtF,OAAK,CAACM,CAAN,GAAU,IAAhC;AACAN,oBAAAA,OAAK,CAACuI,KAAN,GAAcvI,OAAK,CAACuI,KAAN,GAActD,WAA5B;AACH;AACJ;AA9CkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CtB;;AAED,iBAAKzC,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAY;AACjCG,cAAAA,MAAM;AACNc,cAAAA,IAAI,CAAC+E,kBAAL;AACH,aAHD;AAIH,W,CAED;AACA;AACA;;;;4CAEkB;AACd,iBAAKlG,KAAL,CAAWtB,aAAX,CAAyBgC,IAAzB,CAA8B,IAAIyF,YAAJ,CAAiB,MAAjB,EAAyB,SAAzB,CAA9B;AACA,iBAAKC,oBAAL;AACH;;;6CAEkBrF,K,EAAO;AACtB,iBAAKf,KAAL,CAAWtB,aAAX,CAAyBsC,MAAzB,CAAgCD,KAAhC,EAAuC,CAAvC;AACA,iBAAKqF,oBAAL;AACH;;;iDAEsB;AACnB,iBAAKpG,KAAL,CAAWrB,eAAX,GAA6BN,CAAC,CAAC8D,KAAF,CAAQ,KAAKnC,KAAL,CAAWtB,aAAnB,EAAkC,UAAA2D,OAAO;AAAA,qBAAIA,OAAO,CAAClG,IAAZ;AAAA,aAAzC,CAA7B;AACA,iBAAKkE,MAAL;AACH,W,CAGD;AACA;AACA;;;;+CAEqB;AACjB,iBAAKL,KAAL,CAAWpB,aAAX,CAAyB8B,IAAzB,CAA8B,IAAIzE,iBAAJ,EAA9B;AACH;;;gDAEqB8E,K,EAAO;AACzB,iBAAKf,KAAL,CAAWpB,aAAX,CAAyBoC,MAAzB,CAAgCD,KAAhC,EAAuC,CAAvC;AACA,iBAAKV,MAAL;AACH;;;wCAEaO,K,EAAO;AAEjB,gBAAI,CAACA,KAAL,EAAY;AAAE,qBAAOA,KAAP;AAAe;;AAC7BA,YAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACAA,YAAAA,KAAK,GAAGA,KAAK,CAACyF,KAAN,CAAY,GAAZ,EAAiBjF,GAAjB,CAAqB,UAAA/F,CAAC,EAAI;AAC9B,kBAAIA,CAAC,CAACiL,UAAF,CAAa,MAAb,KAAwBjL,CAAC,CAACkL,QAAF,CAAW,GAAX,CAA5B,EAA6C;AACzC,oBAAIC,IAAI,GAAGnL,CAAC,CAAC+H,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBiD,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAX;AACA,oBAAIlI,KAAK,GAAG9C,CAAC,CAACoL,OAAF,CAAU,GAAV,IAAiB,CAAC,CAAlB,4BAAuCvI,cAAc,CAAC7C,CAAC,CAAC+H,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBiD,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAD,CAArD,WAAgG,EAA5G;AACA,oBAAIK,WAAW,GAAGrL,CAAC,CAACgL,KAAF,CAAQ,GAAR,EAAa5F,MAAb,GAAsB,CAAtB,GAA0B,CAAEpF,CAAC,CAAC+H,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBiD,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAA5B,GAAkE,CAApF;AACAhL,gBAAAA,CAAC,GAAG,wBAAgBmL,IAAhB,gBAAyBrI,KAAzB,YAAuCwI,MAAvC,CAA8CD,WAA9C,CAAJ;AAEH,eAND,MAMO,IAAIrL,CAAC,CAACiL,UAAF,CAAa,OAAb,KAAyBjL,CAAC,CAACkL,QAAF,CAAW,GAAX,CAA7B,EAA8C;AACjDlL,gBAAAA,CAAC,GAAGA,CAAC,CAACuL,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAJ;AACA,oBAAIC,MAAM,GAAGxL,CAAC,CAAC+H,OAAF,CAAU,OAAV,EAAmB,EAAnB,EAAuBiD,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAb;AACA,oBAAIS,QAAQ,GAAGzL,CAAC,CAACgL,KAAF,CAAQ,GAAR,EAAa5F,MAAb,GAAsB,CAAtB,GAA0BpF,CAAC,CAAC+H,OAAF,CAAU,OAAV,EAAmB,EAAnB,EAAuBiD,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAA1B,GAAiE,MAAhF;AACA,oBAAIU,SAAS,GAAG1L,CAAC,CAACgL,KAAF,CAAQ,GAAR,EAAa5F,MAAb,GAAsB,CAAtB,GAA0BpF,CAAC,CAAC+H,OAAF,CAAU,OAAV,EAAmB,EAAnB,EAAuBiD,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAA1B,GAAiE,MAAjF;;AACA,oBAAIK,YAAW,GAAGrL,CAAC,CAACgL,KAAF,CAAQ,GAAR,EAAa5F,MAAb,GAAsB,CAAtB,GAA0B,CAAEpF,CAAC,CAAC+H,OAAF,CAAU,OAAV,EAAmB,EAAnB,EAAuBiD,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAA5B,GAAoE,CAAtF;;AACAhL,gBAAAA,CAAC,GAAG,uBAAeyL,QAAf,yBAAoCC,SAApC,sBAAuDF,MAAvD,UAAmEF,MAAnE,CAA0ED,YAA1E,CAAJ;AACH;;AACD,qBAAOrL,CAAP;AACH,aAhBO,EAgBL2L,IAhBK,CAgBA,GAhBA,CAAR;AAkBA,mBAAO,KAAKlH,IAAL,CAAUmH,WAAV,CAAsBrG,KAAtB,CAAP;AACH;;;gDAEqB;AAClB,mBAAOlF,oBAAmB,EAA1B;AACH;;;;QApZ4B4C,gB;;AA0ahC;AAiEA;AAEDqB,MAAAA,WAAW,CAACuH,WAAZ,GAA0B,aAA1B","sourcesContent":["import _ from \"lodash\";\r\nimport {MetricsPanelCtrl} from \"app/plugins/sdk\";\r\nimport \"./sprintf.js\";\r\nimport \"./angular-sprintf.js\";\r\nimport getWidth from './stringwidth/strwidth.js';\r\nimport interact from './libs/interact';\r\n\r\nconst panelDefaults = {\r\n    colorMappings: [],\r\n    colorMappingMap: [],\r\n    valueMappings: [],\r\n    metricValues: [],\r\n    seriesList: [],\r\n    series: [],\r\n    bgimage: '',\r\n    sensors: [],\r\n    groups: [],\r\n    useLabelGroupings: false,\r\n    height: '400px',\r\n    width: '100px',\r\n    templateSrv: null,\r\n    sizecoefficient: 20,\r\n    //uncache is a random number added to the img url to refresh it\r\n    uncache: 0\r\n};\r\n\r\nconst mappingOperators = [{\r\n    name: 'equal', operator: '=', fn: isEqualTo\r\n},{\r\n    name: 'greaterThan', operator: '>', fn: isGreaterThan\r\n}, {\r\n    name: 'lessThan', operator: '<', fn: isLessThan\r\n}]\r\n\r\nlet isTheFirstRender = true\r\n\r\nexport class ImageItCtrl extends MetricsPanelCtrl {\r\n\r\n    constructor($scope, $injector, $sce, templateSrv) {\r\n        super($scope, $injector);\r\n        _.defaults(this.panel, panelDefaults);\r\n        this.templateSrv = templateSrv;\r\n        this.$sce = $sce;\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n        this.events.on('panel-initialized', this.render.bind(this));\r\n        this.events.on('data-received', this.onDataReceived.bind(this));\r\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n    }\r\n\r\n    onDataReceived(dataList) {\r\n        const dataListLength = dataList.length;\r\n        this.panel.metricValues = [];\r\n        for (let series = 0; series < dataListLength; series++) {\r\n            this.panel.metricValues.push({\r\n                name: dataList[series].target,\r\n                value: dataList[series].datapoints[dataList[series].datapoints.length - 1][0]\r\n            });\r\n        }\r\n\r\n        if(!isTheFirstRender) {\r\n            this.refreshImage()\r\n        } else {\r\n            isTheFirstRender = false\r\n        }\r\n        \r\n\r\n        this.render();\r\n    }\r\n\r\n    refreshImage(){\r\n        this.panel.uncache = Math.random()\r\n    }\r\n\r\n    deleteSensor(index) {\r\n        this.panel.sensors.splice(index, 1);\r\n    }\r\n\r\n    addSensor() {\r\n        this.panel.sensors.push(\r\n            new Sensor('A', 50, 25, '%.2f', 'rgba(64,64,64,1.000)', 'rgba(255,255,255,1.000)', 14, true)\r\n        );\r\n    }\r\n\r\n    moveSensorUp(index) {\r\n        const sensor = this.panel.sensors[index]\r\n        this.panel.sensors.splice(index, 1)\r\n        this.panel.sensors.splice(index-1,0,sensor);\r\n    }\r\n\r\n    moveSensorDown(index) {\r\n        const sensor = this.panel.sensors[index]\r\n        this.panel.sensors.splice(index, 1)\r\n        this.panel.sensors.splice(index+1,0,sensor);\r\n    }\r\n\r\n    deleteGroup(index) {\r\n        this.panel.groups.splice(index, 1);\r\n    }\r\n\r\n    addGroup() {\r\n        this.panel.groups.push(\r\n            new Group('A', \"left\", 50, 50)\r\n        );\r\n    }\r\n\r\n    getAvailableGroups() {\r\n\r\n        const result = ctrl.panel.groups.map(g => g.name);\r\n        alert(\"RESULT: \" + JSON.stringify(result))\r\n        return result;\r\n    }\r\n\r\n    onInitEditMode() {\r\n        this.addEditorTab('Sensor', 'public/plugins/pierosavi-imageit-panel/editor.html', 2);\r\n        this.addEditorTab('Value Mapping', 'public/plugins/pierosavi-imageit-panel/mappings.html', 3);\r\n    }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        const panelContainer = (elem.find('.pierosavi-imageit-panel')[0]);\r\n        const image = (panelContainer.querySelector('#imageit-image'))\r\n\r\n        function getGroup(name) {\r\n            for (let group of ctrl.panel.groups) {\r\n                if(group.name == name){\r\n                    return group;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function render() {\r\n\r\n            if (!ctrl.panel.sensors) {\r\n                return;\r\n            }\r\n\r\n            let metricMap = _.keyBy(ctrl.panel.metricValues, value => value.name);\r\n            let valueMappingsMap = _.keyBy(ctrl.panel.valueMappings, mapping => mapping.id);\r\n            let mappingOperatorsMap = _.keyBy(mappingOperators, operator => operator.name);\r\n            \r\n            for (let sensor of ctrl.panel.sensors) {\r\n\r\n                if(!sensor.hasOwnProperty('id')){\r\n                    sensor.id = getRandomId()\r\n                }\r\n\r\n                if (image != null) {\r\n                    let imageWidth = image.offsetWidth;\r\n                    sensor.size = imageWidth * ctrl.panel.sizecoefficient / 1600\r\n                }\r\n\r\n                const sensorWidth = getWidth(sensor.displayName, { font: 'Arial', size: sensor.size }) + 20;\r\n                if(ctrl.panel.useLabelGroupings){\r\n                    const group = getGroup(sensor.group.name)\r\n                    if(group != null && group.sameSize){\r\n                        const newValue = Math.max(group.width, sensorWidth);\r\n                        group.width = newValue;\r\n                        sensor.width = newValue;\r\n                    }else{\r\n                        sensor.panelWidth = sensorWidth + \"px\";  \r\n                        sensor.width = sensorWidth;\r\n                    }\r\n                }else{\r\n                    sensor.panelWidth = sensorWidth + \"px\";  \r\n                    sensor.width = sensorWidth;\r\n                }\r\n            }\r\n\r\n            for (let sensor of ctrl.panel.sensors) {\r\n                if(ctrl.panel.useLabelGroupings && group.sameSize){\r\n                    const group = getGroup(sensor.group.name)\r\n                    if(group != null){\r\n                        sensor.panelWidth = group.width + \"px\";  \r\n                        sensor.width = group.width;\r\n                    }\r\n                }\r\n\r\n                if(!ctrl.panel.useLabelGroupings){\r\n                    sensor.ylocationStr = sensor.ylocation.toString() + \"px\";\r\n                    sensor.xlocationStr = sensor.xlocation.toString() + \"px\";\r\n                }else{\r\n                    alignSensors();\r\n                }\r\n                sensor.sizeStr = sensor.size.toString() + \"px\";\r\n                \r\n                if(sensor.rectangular){\r\n                    sensor.borderRadius = '5%'\r\n                }else{\r\n                    sensor.borderRadius = '50%'\r\n                }\r\n\r\n                if(sensor.link_url != undefined) {\r\n                    sensor.resolvedLink = ctrl.templateSrv.replace(sensor.link_url);\r\n                }\r\n\r\n                //We need to replace possible variables in the sensors name\r\n                const effectiveName = ctrl.templateSrv.replace(sensor.metric);\r\n\r\n                let mValue = metricMap[effectiveName];\r\n                if (mValue === undefined) {\r\n                    mValue = {name: \"dummy\", value: 'null'};\r\n                }\r\n                \r\n                // update existing valueMappings\r\n                for (let valueMapping of ctrl.panel.valueMappings) {\r\n                    if (valueMapping.mappingOperatorName == null) {\r\n                        valueMapping.mappingOperatorName = mappingOperators[0].name\r\n                    }\r\n\r\n                    if(valueMapping.id == null) {\r\n                        valueMapping.id = getRandomId()\r\n                    }\r\n                    \r\n                }\r\n\r\n                sensor.valueMappingIds == undefined ? sensor.valueMappingIds = [] : ''\r\n\r\n                for (const mappingId of sensor.valueMappingIds) {\r\n                    const valueMapping = valueMappingsMap[mappingId]\r\n\r\n                    const mappingOperator = mappingOperatorsMap[valueMapping.mappingOperatorName]\r\n\r\n                    if(mappingOperator.fn(mValue.value, valueMapping.compareTo)) {\r\n\r\n                        sensor.realFontColor = valueMapping.fontColor\r\n                        sensor.realBbColor = valueMapping.bgColor\r\n\r\n                        valueMapping.fontBlink ? sensor.fontBlink : null\r\n                        valueMapping.bgBlink ? sensor.bgBlink : null\r\n\r\n                        sensor.isBold = valueMapping.isSensorFontBold\r\n\r\n                        break\r\n                    } else {\r\n                        // new sensor property so it doesn't lose the original one \r\n                        // https://github.com/pierosavi/pierosavi-imageit-panel/issues/4\r\n                        sensor.realBgColor = sensor.bgColor\r\n                        sensor.realFontColor = sensor.fontColor\r\n\r\n                        sensor.fontBlink = false\r\n                        sensor.bgBlink = false\r\n\r\n                        sensor.isBold = false\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                //finally format the value itself\r\n                sensor.valueFormatted = sprintf(sensor.format,mValue.value);\r\n            }\r\n\r\n            dragEventSetup();\r\n            \r\n        }\r\n\r\n        function dragEventSetup() {\r\n            window.interact('#imageit_panel' + ctrl.panel.id + '_sensor').draggable({\r\n                // I dont like it personally but this could be configurable in the future\r\n                inertia: false,\r\n                restrict: {\r\n                    restriction: \"#draggableparent\",\r\n                    endOnly: true,\r\n                    elementRect: { top: 0, left: 0, bottom: 1, right: 1 }\r\n                },\r\n                autoScroll: true,\r\n                onmove: function (event) {\r\n                    const target = event.target,\r\n                    // keep the dragged position in the data-x/data-y attributes\r\n                    x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,\r\n                    y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\r\n\r\n                    // translate the element\r\n                    target.style.webkitTransform =\r\n                    target.style.transform =\r\n                    'translate(' + x + 'px, ' + y + 'px)';\r\n\r\n                    // update the position attributes\r\n                    target.setAttribute('data-x', x);\r\n                    target.setAttribute('data-y', y);\r\n\r\n                },\r\n                onend: function (event) {\r\n                    const target = event.target;\r\n\r\n                    let imageHeight = image.offsetHeight;\r\n                    let imageWidth = image.offsetWidth;\r\n\r\n                    let x = target.getAttribute('data-x');\r\n                    let y = target.getAttribute('data-y')\r\n\r\n                    // get percentage of relative distance from starting point \r\n                    let xpercentage = (x * 100) / imageWidth;\r\n                    let ypercentage = (y * 100) / imageHeight;\r\n\r\n                    // browsers dont render more than 4 decimals so better cut away the others\r\n                    let newX = parseInt(target.style.left) + xpercentage;\r\n                    newX = Math.round(newX * 10000) / 10000\r\n\r\n                    let newY = parseInt(target.style.top) + ypercentage;\r\n                    newY = Math.round(newY * 10000) / 10000\r\n\r\n                    target.style.webkitTransform =\r\n                    target.style.transform =\r\n                    'translate(0px, 0px)';\r\n                    \r\n                    // manually set the new style so I don't need to render() again\r\n                    target.style.left = newX + '%'\r\n                    target.style.top = newY + '%'\r\n\r\n                    // really update the sensor values\r\n\r\n                    //find sensor with the id from the refId attribute on html\r\n                    let sensor = _.find(ctrl.panel.sensors, {'id': (event.target).getAttribute('refId')})\r\n\r\n                    sensor.xlocation = newX\r\n                    sensor.ylocation = newY\r\n\r\n                    // reset the starting sensor points\r\n                    target.setAttribute('data-x', 0);\r\n                    target.setAttribute('data-y', 0);\r\n                }\r\n            });\r\n        }\r\n\r\n        function alignSensors(){\r\n            for (let group of ctrl.panel.groups) {\r\n                group.nextTop = undefined;\r\n                group.nextX = undefined;\r\n            }\r\n            for (let sensor of ctrl.panel.sensors) {\r\n                const sensorHeight = sensor.size + 30;\r\n                const sensorWidth = sensor.width + 10;\r\n                let group = getGroup(sensor.group.name)\r\n                if(group.alignment == \"left\"){\r\n                    if(group.nextTop === undefined){\r\n                        group.nextTop = group.y;\r\n                    }\r\n                    sensor.ylocationStr = group.nextTop + \"px\";\r\n                    sensor.xlocationStr = group.x + \"px\";\r\n                    group.nextTop = group.nextTop + sensorHeight;\r\n                } else if(group.alignment == \"middle\"){\r\n                    if(group.nextTop === undefined){\r\n                        group.nextTop = group.y;\r\n                    }\r\n                    sensor.ylocationStr = group.nextTop + \"px\";\r\n                    if(group.sameSize){\r\n                        sensor.xlocationStr = (group.x - (group.width/2)) + \"px\";\r\n                    }else{\r\n                        sensor.xlocationStr = (group.x - (sensor.width/2))+ \"px\";\r\n                    }\r\n                    group.nextTop = group.nextTop + sensorHeight;\r\n                } else if(group.alignment == \"right\"){\r\n                    if(group.nextTop === undefined){\r\n                        group.nextTop = group.y;\r\n                    }\r\n                    sensor.ylocationStr = group.nextTop + \"px\";\r\n                    if(group.sameSize){\r\n                        sensor.xlocationStr = (group.x - group.width) + \"px\";\r\n                    }else{\r\n                        sensor.xlocationStr = (group.x - sensor.width)+ \"px\";\r\n                    }\r\n                    group.nextTop = group.nextTop + sensorHeight;\r\n                } else if(group.alignment == \"top\"){\r\n                    if(group.nextX === undefined){\r\n                        group.nextX = group.x;\r\n                    }\r\n                    sensor.xlocationStr = group.nextX + \"px\";\r\n                    sensor.ylocationStr = group.y + \"px\";\r\n                    group.nextX = group.nextX + sensorWidth;\r\n                }    \r\n            }\r\n        }\r\n\r\n        this.events.on('render', function () {\r\n            render();\r\n            ctrl.renderingCompleted();\r\n        });\r\n    }\r\n\r\n    //------------------\r\n    // Color mapping stuff\r\n    //------------------\r\n\r\n    addColorMapping() {\r\n        this.panel.colorMappings.push(new ColorMapping('name', '#FFFFFF'));\r\n        this.refreshColorMappings();\r\n    }\r\n\r\n    removeColorMapping(index) {\r\n        this.panel.colorMappings.splice(index, 1);\r\n        this.refreshColorMappings();\r\n    }\r\n\r\n    refreshColorMappings() {\r\n        this.panel.colorMappingMap = _.keyBy(this.panel.colorMappings, mapping => mapping.name);\r\n        this.render();\r\n    }\r\n\r\n\r\n    //------------------\r\n    // Mapping stuff\r\n    //------------------\r\n\r\n    addValueMappingMap() {\r\n        this.panel.valueMappings.push(new ValueColorMapping());\r\n    }\r\n\r\n    removeValueMappingMap(index) {\r\n        this.panel.valueMappings.splice(index, 1);\r\n        this.render();\r\n    }\r\n\r\n    replaceTokens(value) {\r\n\r\n        if (!value) { return value; }\r\n        value = value + \"\";\r\n        value = value.split(\" \").map(a => {\r\n            if (a.startsWith(\"_fa-\") && a.endsWith(\"_\")) {\r\n                let icon = a.replace(/\\_/g, \"\").split(\",\")[0];\r\n                let color = a.indexOf(\",\") > -1 ? ` style=\"color:${normalizeColor(a.replace(/\\_/g, \"\").split(\",\")[1])}\" ` : \"\";     \r\n                let repeatCount = a.split(\",\").length > 2 ? +(a.replace(/\\_/g, \"\").split(\",\")[2]) : 1;\r\n                a = `<i class=\"fa ${icon}\" ${color}></i> `.repeat(repeatCount);\r\n                \r\n            } else if (a.startsWith(\"_img-\") && a.endsWith(\"_\")) {\r\n                a = a.slice(0, -1);\r\n                let imgUrl = a.replace(\"_img-\", \"\").split(\",\")[0];\r\n                let imgWidth = a.split(\",\").length > 1 ? a.replace(\"_img-\", \"\").split(\",\")[1] : \"20px\";\r\n                let imgHeight = a.split(\",\").length > 2 ? a.replace(\"_img-\", \"\").split(\",\")[2] : \"20px\";\r\n                let repeatCount = a.split(\",\").length > 3 ? +(a.replace(\"_img-\", \"\").split(\",\")[3]) : 1;\r\n                a = `<img width=\"${imgWidth}\" height=\"${imgHeight}\" src=\"${imgUrl}\"/>`.repeat(repeatCount);\r\n            }\r\n            return a;\r\n        }).join(\" \");\r\n\r\n        return this.$sce.trustAsHtml(value);\r\n    }\r\n\r\n    getMappingOperators() {\r\n        return getMappingOperators()\r\n    }\r\n\r\n}\r\n\r\nfunction isEqualTo(a, b) {\r\n    return (a !== undefined && b !== undefined) ? a == b : false\r\n}\r\n\r\nfunction isGreaterThan(a, b) {\r\n    return (a !== undefined && b !== undefined) ? a > b : false\r\n}\r\n\r\nfunction isLessThan(a, b) {\r\n    return (a !== undefined && b !== undefined) ? a < b : false\r\n}\r\n\r\nfunction getMappingOperators() {\r\n    return mappingOperators\r\n}\r\n\r\nfunction getRandomId() {\r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nfunction ValueColorMapping() {\r\n    'use strict';\r\n    // TODO: check if it doesnt exist yet\r\n    this.id = getRandomId()\r\n    this.name = undefined\r\n    this.operatorName = mappingOperators[0].name\r\n    this.compareTo = undefined\r\n    this.isSensorFontBold = false\r\n    this.fontColor = undefined\r\n    this.bgColor = undefined\r\n    this.fontBlink = false\r\n    this.bgBlink = false\r\n}\r\n\r\nfunction Sensor(metric,\r\n                xlocation,\r\n                ylocation,\r\n                format,\r\n                bgColor,\r\n                fontColor,\r\n                size,\r\n                visible) {\r\n    'use strict';\r\n    this.metric = metric;\r\n    this.xlocation = xlocation;\r\n    this.ylocation = ylocation;\r\n    this.format = format;\r\n    this.bgColor = bgColor;\r\n    this.fontColor = fontColor;\r\n    this.size = size;\r\n    this.visible = visible;\r\n    this.renderValue = false;\r\n    this.valueFormatted = '';\r\n    this.valueUnit = '';\r\n    this.displayName = '';\r\n    this.link_url = '';\r\n    this.resolvedLink = '';\r\n    this.rectangular = true;\r\n    this.group = 'A';\r\n    this.valueMappingIds = []\r\n    this.isBold = false\r\n    this.id = getRandomId()\r\n}\r\n\r\nfunction Group(name, alignment, x, y) {\r\n    'use strict';\r\n    this.name = name;\r\n    this.alignment = alignment;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.sameSize = false;\r\n    this.width = 100;\r\n}\r\n\r\nfunction normalizeColor(color) {\r\n    \r\n    if (color.toLowerCase() === \"green\") {\r\n        return \"rgba(50, 172, 45, 0.97)\";\r\n    } else if (color.toLowerCase() === \"orange\") {\r\n        return \"rgba(237, 129, 40, 0.89)\";\r\n    } else if (color.toLowerCase() === \"red\") {\r\n        return \"rgba(245, 54, 54, 0.9)\";\r\n    } else { return color.toLowerCase(); }\r\n};\r\n\r\nImageItCtrl.templateUrl = 'module.html';\r\n"],"file":"imageit_ctrl.js"}